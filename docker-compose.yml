services:
  web:
    build: .
    command: gunicorn --bind 0.0.0.0:5000 --workers 4 --timeout 120 run:app
    ports:
      - "5001:5000"  # Changed external port to 5001 to avoid conflict with macOS Control Center
    volumes:
      - .:/app
    env_file:
      - .env.docker
    environment:
      - OBJC_DISABLE_INITIALIZE_FORK_SAFETY=YES  # Required for macOS compatibility
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      - RQ_REDIS_URL=redis://redis:6379/0
      - USE_LIGHTWEIGHT_ANALYZER=false  # Always use comprehensive analysis
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - app-network

  worker:
    build: .
    entrypoint: ["/app/docker-entrypoint-worker.sh"]
    volumes:
      - .:/app
    env_file:
      - .env.docker
    environment:
      - OBJC_DISABLE_INITIALIZE_FORK_SAFETY=YES  # Required for macOS compatibility
      - PYTHONUNBUFFERED=1
      - FLASK_ENV=development
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      - RQ_REDIS_URL=redis://redis:6379/0
      - RQ_WORKER_BURST=true  # Process jobs in burst mode for faster processing
      - RQ_WORKER_TIMEOUT=600  # 10 minute timeout for comprehensive analysis
      - USE_LIGHTWEIGHT_ANALYZER=false  # Always use comprehensive analysis
    depends_on:
      redis:
        condition: service_healthy
      db:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "-c", "import redis; r = redis.from_url('redis://redis:6379/0'); r.ping()"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    networks:
      - app-network
    deploy:
      replicas: 6  # Scale to 6 workers for faster processing

  db:
    image: postgres:14-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - app-network

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --maxmemory 512mb --maxmemory-policy allkeys-lru --save 60 1000
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
    restart: unless-stopped
    networks:
      - app-network

volumes:
  postgres_data:
  redis_data:

networks:
  app-network:
    driver: bridge
