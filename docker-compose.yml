services:
  web:
    build: .
    command: gunicorn --bind 0.0.0.0:5000 --workers 4 --timeout 600 run:app
    ports:
      - "5001:5000"  # Changed external port to 5001 to avoid conflict with macOS Control Center
    volumes:
      - .:/app
    environment:
      - OBJC_DISABLE_INITIALIZE_FORK_SAFETY=YES  # Required for macOS compatibility
      - FLASK_ENV=${FLASK_ENV}  # Use environment setting from .env
      - ENV=${ENV}  # Use environment setting from .env
      - DEBUG=false  # Production mode
      - SECRET_KEY=${SECRET_KEY}
      - SPOTIPY_CLIENT_ID=${SPOTIPY_CLIENT_ID}
      - SPOTIPY_CLIENT_SECRET=${SPOTIPY_CLIENT_SECRET}
      - SPOTIPY_REDIRECT_URI=${SPOTIPY_REDIRECT_URI}
      - SPOTIFY_CLIENT_ID=${SPOTIFY_CLIENT_ID}
      - SPOTIFY_CLIENT_SECRET=${SPOTIFY_CLIENT_SECRET}
      - DATABASE_URL=${DATABASE_URL}
      - RQ_REDIS_URL=${RQ_REDIS_URL}
      - REDIS_URL=${REDIS_URL}
      - LYRICSGENIUS_API_KEY=${LYRICSGENIUS_API_KEY}
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'
    networks:
      - app-network

  worker:
    build: .
    command: bash /app/scripts/docker-entrypoint-worker.sh
    depends_on:
      - db
      - redis
    environment:
      - FLASK_ENV=${FLASK_ENV:-development}
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD:-your_password}@db:5432/${POSTGRES_DB:-spotify_cleanup}
      - REDIS_URL=redis://redis:6379/0
      - SPOTIFY_CLIENT_ID=${SPOTIFY_CLIENT_ID}
      - SPOTIFY_CLIENT_SECRET=${SPOTIFY_CLIENT_SECRET}
      - GENIUS_ACCESS_TOKEN=${GENIUS_ACCESS_TOKEN}
      - SECRET_KEY=${SECRET_KEY:-dev-secret-key}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - PERPLEXITY_API_KEY=${PERPLEXITY_API_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - GOOGLE_API_KEY=${GOOGLE_API_KEY}
      - MISTRAL_API_KEY=${MISTRAL_API_KEY}
      - AZURE_OPENAI_API_KEY=${AZURE_OPENAI_API_KEY}
      - AZURE_OPENAI_ENDPOINT=${AZURE_OPENAI_ENDPOINT}
      - OPENROUTER_API_KEY=${OPENROUTER_API_KEY}
      - XAI_API_KEY=${XAI_API_KEY}
      - OLLAMA_API_KEY=${OLLAMA_API_KEY}
      - OLLAMA_BASE_URL=${OLLAMA_BASE_URL}
      # Performance optimizations for M1 Max with GPU support
      - OMP_NUM_THREADS=2  # Optimize thread usage per worker
      - MKL_NUM_THREADS=2  # Intel Math Kernel Library optimization
      - PYTORCH_ENABLE_MPS_FALLBACK=1  # Enable Metal Performance Shaders on Apple Silicon
      - PYTORCH_MPS_HIGH_WATERMARK_RATIO=0.0  # Optimize MPS memory usage
    volumes:
      - .:/app
    networks:
      - app-network
    deploy:
      replicas: 3  # 3 high-performance workers for M1 Max
      resources:
        limits:
          memory: 8G  # 8GB per worker for M1 Max (3×8=24GB total)
          cpus: '3.0'  # 3.0 cores per worker (3×3=9 cores total)
        reservations:
          memory: 4G  # Reserve 4G minimum per worker
          cpus: '2.0'  # Reserve 2 cores minimum per worker
    # Apple Silicon Metal Performance Shaders acceleration (no NVIDIA runtime needed)

  db:
    image: postgres:14-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'
    networks:
      - app-network

  redis:
    image: redis:7-alpine
    ports:
      - "127.0.0.1:6380:6379"  # Use port 6380 to avoid conflict with local Redis
    volumes:
      - redis_data:/data
    command: redis-server --maxmemory 512mb --maxmemory-policy allkeys-lru --save 60 1000
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 10s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G  # Increased for 6 workers
          cpus: '0.5'  # Increased for higher load
        reservations:
          memory: 512M
          cpus: '0.25'
    networks:
      - app-network

  prometheus:
    image: prom/prometheus:latest
    ports:
      - "127.0.0.1:9090:9090"  # Only expose to localhost for security
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'
    networks:
      - app-network
    depends_on:
      - web

  grafana:
    image: grafana/grafana:latest
    ports:
      - "127.0.0.1:3000:3000"  # Only expose to localhost for security
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin123}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'
    networks:
      - app-network
    depends_on:
      - prometheus

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  app-network:
    driver: bridge
