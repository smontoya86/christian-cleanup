# Production Environment Configuration Template
# Copy this file to .env.prod and update with your actual production values

# ===========================================
# REQUIRED PRODUCTION SETTINGS
# ===========================================

# Flask Application Settings
FLASK_ENV=production
FLASK_DEBUG=false
SECRET_KEY=your-very-long-random-secret-key-at-least-32-characters-long
WTF_CSRF_ENABLED=true

# Database Configuration (PostgreSQL Required)
# Format: postgresql://username:password@host:port/database
DATABASE_URL=postgresql://christian_user:secure_password@localhost:5432/christian_cleanup_prod

# Redis Configuration (Required for queues and caching)
REDIS_URL=redis://localhost:6379/0
REDIS_SSL=false

# ===========================================
# REQUIRED API CREDENTIALS
# ===========================================

# Spotify API (Required - Get from https://developer.spotify.com/)
SPOTIFY_CLIENT_ID=your-production-spotify-client-id
SPOTIFY_CLIENT_SECRET=your-production-spotify-client-secret
SPOTIFY_REDIRECT_URI=https://yourdomain.com/auth/callback

# ===========================================
# OPTIONAL API CREDENTIALS
# ===========================================

# Genius API (Optional - For enhanced lyrics fetching)
LYRICSGENIUS_API_KEY=your-genius-api-key

# Bible API (Optional - For biblical reference verification)
BIBLE_API_KEY=your-bible-api-key

# ===========================================
# PRODUCTION OPTIMIZATION SETTINGS
# ===========================================

# Database Connection Pool Settings
DB_POOL_SIZE=20
DB_MAX_OVERFLOW=30
DB_POOL_RECYCLE=3600
DB_POOL_TIMEOUT=30

# RQ Worker Settings
RQ_DEFAULT_TIMEOUT=3600
RQ_RESULT_TTL=86400

# Analysis Settings
ANALYSIS_BATCH_SIZE=50
ANALYSIS_TIMEOUT=300
CACHE_LYRICS_TTL=604800

# ===========================================
# LOGGING CONFIGURATION
# ===========================================

LOG_LEVEL=INFO
LOG_TO_FILE=true
LOG_FILE_PATH=/var/log/christian-cleanup/app.log
LOG_MAX_BYTES=10485760
LOG_BACKUP_COUNT=5

# ===========================================
# SECURITY SETTINGS
# ===========================================

# Rate Limiting
RATE_LIMIT_ENABLED=true

# SSL/TLS Settings (if using SSL)
SSL_CERT_PATH=/etc/ssl/certs/yourdomain.crt
SSL_KEY_PATH=/etc/ssl/private/yourdomain.key

# ===========================================
# DOCKER COMPOSE VARIABLES
# ===========================================

# PostgreSQL Docker Settings
POSTGRES_USER=christian_user
POSTGRES_PASSWORD=your-secure-database-password
POSTGRES_DB=christian_cleanup_prod

# Grafana Admin Settings
GRAFANA_ADMIN_USER=admin
GRAFANA_ADMIN_PASSWORD=your-secure-grafana-password

# ===========================================
# PERFORMANCE MONITORING
# ===========================================

# Enable performance monitoring
ENABLE_METRICS=true
METRICS_PORT=9090

# Health check settings
HEALTH_CHECK_INTERVAL=30
HEALTH_CHECK_TIMEOUT=10

# ===========================================
# BACKUP CONFIGURATION
# ===========================================

# Backup settings
BACKUP_ENABLED=true
BACKUP_RETENTION_DAYS=30
BACKUP_SCHEDULE=0 2 * * *  # Daily at 2 AM

# S3 Backup Settings (Optional)
# AWS_ACCESS_KEY_ID=your-aws-access-key
# AWS_SECRET_ACCESS_KEY=your-aws-secret-key
# S3_BACKUP_BUCKET=your-backup-bucket
# S3_BACKUP_REGION=us-east-1

# ===========================================
# PRODUCTION DEPLOYMENT NOTES
# ===========================================

# 1. SECURITY REQUIREMENTS:
#    - Generate a strong SECRET_KEY (minimum 32 characters)
#    - Use secure passwords for all services
#    - Enable SSL/TLS in production
#    - Restrict database and Redis access
#    - Set up proper firewall rules

# 2. PERFORMANCE RECOMMENDATIONS:
#    - Use PostgreSQL with proper indexes
#    - Configure Redis with appropriate memory limits
#    - Set up connection pooling
#    - Enable Nginx for static file serving
#    - Configure log rotation

# 3. MONITORING SETUP:
#    - Configure Prometheus metrics collection
#    - Set up Grafana dashboards
#    - Enable log aggregation with Loki
#    - Configure alerting rules

# 4. BACKUP STRATEGY:
#    - Daily automated database backups
#    - File system backups for uploads
#    - Test restore procedures regularly
#    - Off-site backup storage recommended

# 5. HIGH AVAILABILITY:
#    - Use load balancer for multiple app instances
#    - Database clustering/replication
#    - Redis clustering for high availability
#    - Health checks and auto-restart

# 6. SECURITY CHECKLIST:
#    - Change all default passwords
#    - Enable HTTPS only
#    - Set up security headers
#    - Regular security updates
#    - Monitor for security vulnerabilities

# 7. SCALING CONSIDERATIONS:
#    - Monitor resource usage
#    - Scale workers based on queue length
#    - Database read replicas for heavy loads
#    - CDN for static assets
#    - Caching strategy optimization
