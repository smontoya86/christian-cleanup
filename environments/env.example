# Flask Configuration
FLASK_ENV=production
SECRET_KEY=replace-with-strong-secret

# Spotify API Configuration
# Get these from https://developer.spotify.com/dashboard
# 1. Create a new app or use an existing one
# 2. Add http://127.0.0.1:5001/auth/callback to "Redirect URIs" in app settings
# 3. Copy Client ID and Client Secret from the app dashboard
SPOTIFY_CLIENT_ID=your-spotify-client-id-here
SPOTIFY_CLIENT_SECRET=your-spotify-client-secret-here
SPOTIFY_REDIRECT_URI=http://127.0.0.1:5001/auth/callback

# Required Spotify scopes (do not change unless you know what you're doing)
SPOTIFY_SCOPES=user-read-email playlist-read-private user-library-read user-top-read

# Genius API Configuration (optional - for lyrics fetching)
# Free API key from https://genius.com/api-clients
LYRICSGENIUS_API_KEY=your-genius-api-key-here

# Bible API Configuration (optional - for biblical references)
# Free API key for biblical verse lookups
BIBLE_API_KEY=your-bible-api-key-here

# Database Configuration
DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}

# Redis Configuration (for background tasks)
REDIS_URL=redis://redis:6379/0

# Analysis Configuration (Router-only, OpenAI-compatible)
DISABLE_ANALYZER_PREFLIGHT=0
LLM_API_BASE_URL=http://llm:8000/v1
# Fallback: if not reachable, analyzer auto-detects http://ollama:11434/v1 then host.docker.internal
LLM_MODEL=llama3.1:8b
LLM_MAX_TOKENS=512
LLM_TEMPERATURE=0.2
LLM_TOP_P=0.9

# Redis Configuration - Using service name in Docker
RQ_REDIS_URL=redis://redis:6379/0

# Container-only workflow (do not run host Python)
NEXTAUTH_URL=http://localhost:5001
NEXTAUTH_SECRET=replace-with-strong-nextauth-secret

# Genius API credentials (optional - for enhanced lyrics fetching)
# Free API from https://genius.com/api-clients
GENIUS_CLIENT_ID=your-genius-client-id-here
GENIUS_CLIENT_SECRET=your-genius-client-secret-here

# Default to LLM analyzer via vLLM/Ollama endpoints

# Optional lyrics/KB settings
LLM_CHUNK_CHAR_LIMIT=3500
