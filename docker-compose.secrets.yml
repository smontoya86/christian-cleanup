# Docker Compose with Secrets Support
# 
# This configuration uses Docker Compose secrets for secure API key management.
# 
# Setup:
# 1. Create secrets directory: mkdir -p secrets/
# 2. Add API keys to individual files:
#    echo "your-openai-key" > secrets/openai_api_key.txt
#    echo "your-spotify-client-id" > secrets/spotify_client_id.txt
#    echo "your-spotify-client-secret" > secrets/spotify_client_secret.txt
#    echo "your-genius-token" > secrets/genius_access_token.txt
# 3. Secure the secrets directory: chmod 600 secrets/*.txt
# 4. Add secrets/ to .gitignore

version: '3.8'

services:
  web:
    build: .
    ports:
      - "5001:5001"
    environment:
      # Database
      - DATABASE_URL=postgresql://postgres:postgres@db:5432/christian_cleanup
      
      # Redis
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      
      # Flask
      - FLASK_ENV=production
      - SECRET_KEY=${SECRET_KEY:-production-secret-change-me}
      
      # OpenAI Model Configuration
      - OPENAI_MODEL=${OPENAI_MODEL:-ft:gpt-4o-mini-2024-07-18:personal:christian-discernment-4o-mini-v1:CLxyepav}
      - LLM_API_BASE_URL=https://api.openai.com/v1
      - LLM_TEMPERATURE=0.2
      - LLM_MAX_TOKENS=2000
      - LLM_TIMEOUT=60
      
      # Load API keys from secrets
      - OPENAI_API_KEY_FILE=/run/secrets/openai_api_key
      - SPOTIFY_CLIENT_ID_FILE=/run/secrets/spotify_client_id
      - SPOTIFY_CLIENT_SECRET_FILE=/run/secrets/spotify_client_secret
      - GENIUS_ACCESS_TOKEN_FILE=/run/secrets/genius_access_token
    
    secrets:
      - openai_api_key
      - spotify_client_id
      - spotify_client_secret
      - genius_access_token
    
    depends_on:
      - db
      - redis
    
    volumes:
      - ./app:/app/app
      - ./migrations:/app/migrations
    
    command: gunicorn -w 4 -b 0.0.0.0:5001 --timeout 120 wsgi:app

  db:
    image: postgres:15-alpine
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=christian_cleanup
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes

secrets:
  openai_api_key:
    file: ./secrets/openai_api_key.txt
  spotify_client_id:
    file: ./secrets/spotify_client_id.txt
  spotify_client_secret:
    file: ./secrets/spotify_client_secret.txt
  genius_access_token:
    file: ./secrets/genius_access_token.txt

volumes:
  postgres_data:
  redis_data:

